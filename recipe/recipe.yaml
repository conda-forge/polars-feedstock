context:
  version: "1.35.1"

recipe:
  name: polars
  version: ${{ version }}

source:
  - if: polars_runtime == '32'
    then:
      - if: target_platform == 'linux-64'
        then:
          - url: https://pypi.org/packages/source/p/polars/polars-${{ version }}.tar.gz
            sha256: 2e9bff26293c0b208e74d4232313d09053e49b4a04fc8fd3e48def7d3e843ba1
            target_directory: polars-python
      - url: https://pypi.org/packages/source/p/polars-runtime-32/polars_runtime_32-${{ version }}.tar.gz
        sha256: f6b4ec9cd58b31c87af1b8c110c9c986d82345f1d50d7f7595b5d447a19dc365
        target_directory: polars-runtime-32
  - if: polars_runtime == '64'
    then:
      url: https://pypi.org/packages/source/p/polars-runtime-64/polars_runtime_64-${{ version }}.tar.gz
      sha256: 50fa6adff602e8c6e5e376f1d2586032e9b087ed0f4a186a0b2dc1b063f5b58b
      target_directory: polars-runtime-64
  - if: polars_runtime == 'compat'
    then:
      url: https://pypi.org/packages/source/p/polars-runtime-compat/polars_runtime_compat-${{ version }}.tar.gz
      sha256: a66b5365be0f46b83382c65529c5088ef3762859ac2f3410beb1de6084e249f5
      target_directory: polars-runtime-compat

build:
  number: 0

outputs:
  - package:
      name: polars
    build:
      noarch: python
      script: |
        cd polars-python
        $PYTHON -m pip install . -vv
      skip: not (polars_runtime == "32" and target_platform == "linux-64" and match(python, python_min ~ ".*") and is_abi3)
    requirements:
      host:
        - python ${{ python_min }}.*
        - pip
        - setuptools
      run:
        - polars-runtime-32 ==${{ version }}
        - python >=${{ python_min }}
      run_constraints:
        - numpy >=1.16.0
        - pyarrow >=7.0.0
        - fastexcel >=0.9
        - openpyxl >=3.0.0
        - xlsx2csv >=0.8.0
        - connectorx >=0.3.2
        - deltalake >=1.0.0
        - pyiceberg >=0.7.1
        - altair >=5.4.0
        - great_tables >=0.8.0
        - polars-runtime-32 ==${{ version }}
        - polars-runtime-64 ==${{ version }}
        - polars-runtime-compat ==${{ version }}
    tests:
      - python:
          pip_check: true
          imports:
            - polars
          python_version: ${{ python_min }}.*
      - script:
          - python -c 'from polars import DataFrame'
          - python -c 'import polars; polars.show_versions()'
      - package_contents:
          site_packages:
            - polars/dataframe/__init__.py
            - polars-${{ version }}.dist-info/*
    about:
      license_file: polars-python/LICENSE

  - package:
      name: polars-runtime-${{ polars_runtime }}
    build:
      script:
        file: build_polars_runtime
      skip: not (match(python, python_min ~ ".*") and is_abi3)
      python:
        version_independent: true
    requirements:
      build:
        - if: build_platform != target_platform
          then:
            - python
            - cross-python_${{ target_platform }}
            - crossenv
            - maturin >=1.3.2,<2
        - ${{ compiler('c') }}
        - ${{ compiler('cxx') }}
        - ${{ stdlib('c') }}
        - ${{ compiler('rust') }}
        - cargo-auditable
        - if: build_platform == 'win-64'
          then:
            - posix
        - cmake
        - if: unix
          then:
            - make
        - cargo-bundle-licenses
      host:
        - python
        - python-abi3
        - pip
        - maturin >=1.3.2,<2
      run:
        - python
      ignore_run_exports:
        from_package:
          - cross-python_${{ target_platform }}
    tests:
      - python:
          pip_check: true
          imports:
            - _polars_runtime_${{ polars_runtime }}
          python_version: ${{ python_min }}.*
      - package_contents:
          site_packages:
            - _polars_runtime_${{ polars_runtime }}/__init__.py
            - _polars_runtime_${{ polars_runtime }}/_polars_runtime_${{ polars_runtime }}.${{ 'abi3.so' if unix else 'pyd' }}
            - polars_runtime_${{ polars_runtime }}-${{ version }}.dist-info/*
          strict: true
    about:
      license_file:
        - polars-runtime-${{ polars_runtime }}/LICENSE
        - polars-runtime-${{ polars_runtime }}/THIRDPARTY.yml

about:
  homepage: https://github.com/pola-rs/polars
  license: MIT
  license_file:
    - polars-runtime-${{ polars_runtime }}/LICENSE
    - polars-runtime-${{ polars_runtime }}/THIRDPARTY.yml
  summary: Dataframes powered by a multithreaded, vectorized query engine, written in Rust
  description: Polars is a DataFrame interface on top of an OLAP Query Engine implemented in Rust using Apache Arrow Columnar Format as the memory model.
  documentation: https://docs.pola.rs
  repository: https://github.com/pola-rs/polars

extra:
  recipe-maintainers:
    - borchero
    - Maxyme
    - timkpaine
    - ritchie46
    - sugatoray
    - xhochy
    - dhirschfeld
    - pavelzw
    - "0xbe7a"
