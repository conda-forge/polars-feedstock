diff --git a/Cargo.toml b/Cargo.toml
index 86c6f29..78a991b 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -15,7 +15,6 @@ exclude = [".git*", "dev_utils/**/*", "tests/**/*"]

 [dependencies]
 num-traits = { version = "0.2", default-features = false }
-half = { version = "2.3.1", default-features = false, features=["num-traits"], optional = true }
 ndarray = { version = "0.15.6", default-features = false, optional = true }
 arrow = { version = ">0", default-features = false, optional = true }
 arrow2 = { version = ">0.0", default-features = false, optional = true }
@@ -25,7 +24,6 @@ arrow2 = { version = ">0.0", default-features = false, optional = true }
 default = ["nightly_simd", "float"]
 nightly_simd = []
 float = []
-half = ["dep:half"]
 ndarray = ["dep:ndarray"]
 arrow = ["dep:arrow"]
 arrow2 = ["dep:arrow2"]
@@ -38,20 +36,6 @@ codspeed-criterion-compat = "2.3.3"
 criterion = "0.5.1"
 dev_utils = { path = "dev_utils" }

-[dev-dependencies.half]
-features = ["rand_distr"]
-
-
-[[bench]]
-name = "bench_f16_return_nan"
-harness = false
-required-features = ["half"]
-
-[[bench]]
-name = "bench_f16_ignore_nan"
-harness = false
-required-features = ["half"]
-
 [[bench]]
 name = "bench_f32_return_nan"
 harness = false
diff --git a/src/simd/simd_f32_return_nan.rs b/src/simd/simd_f32_return_nan.rs
index 2cde245..7a89a81 100644
--- a/src/simd/simd_f32_return_nan.rs
+++ b/src/simd/simd_f32_return_nan.rs
@@ -354,7 +354,7 @@ mod avx512 {

         #[inline(always)]
         unsafe fn _mm_loadu(data: *const f32) -> __m512i {
-            _f32_as_m512i_to_i32ord(_mm512_loadu_si512(data as *const i32))
+            _f32_as_m512i_to_i32ord(_mm512_loadu_si512(data as *const __m512i))
         }

         #[inline(always)]
diff --git a/src/simd/simd_i32.rs b/src/simd/simd_i32.rs
index 9772056..7fdc4d0 100644
--- a/src/simd/simd_i32.rs
+++ b/src/simd/simd_i32.rs
@@ -192,7 +192,7 @@ mod avx512 {

         #[inline(always)]
         unsafe fn _mm_loadu(data: *const i32) -> __m512i {
-            _mm512_loadu_si512(data as *const i32)
+            _mm512_loadu_si512(data as *const __m512i)
         }

         #[inline(always)]
